---
openapi: 3.0.3
info:
  title: Users API
  description: This is the API of the User service
  contact:
    email: gabriel.aillet@imt-atlantique.net
  license:
    name: GPL v3
    url: https://www.gnu.org/licenses/gpl-3.0.en.html
  version: 1.0.0
tags:
- name: admins
  description: Secured Admin-only calls
- name: developers
  description: Operations available to regular developers
paths:
  /users/{userId}/booking:
    post:
      tags:
        - developers
      summary: Create a booking for the user
      description: Create a new movie booking for a user
      operationId: createBookingForUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: integer
                  example: 20151201
                movieid:
                  type: string
                  example: "267eedb8-0f5d-42d5-8f43-72426b9fb3e6"
      responses:
        "200":
          description: Booking created
          content:
            application/json:
              schema:
                type: string
                example: "Reservation at date 20151201 for movie 267eedb8-0f5d-42d5-8f43-72426b9fb3e6 made"
        "400":
          description: Bad request
  /:
    get:
      tags:
      - developers
      summary: home page of the service
      description: |
        Nothing to do
      operationId: home
      responses:
        "200":
          description: welcome message
          content:
            text/html:
              schema:
                type: string
                example: <h1>Test</h1>
  /users/{user_Id}:  # Ensure to keep consistency in naming in both the spec and the code
    get:
      tags:
        - developers
      summary: get user info that has user_Id
      description: |
        get user info that has user_Id
      operationId: getUserInfoById
      parameters:
        - name: user_Id    # Include path parameters here
          in: path
          required: true
          schema:
            type: string
            example: chris_rivers  # Example of a user_Id
      responses:
        "200":
          description: get user info that has user_Id
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userItem'
        "400":
          description: bad input parameter

  /users:
    get:
      tags:
        - developers
      summary: get users active since a specific timestamp
      parameters:
        - name: timeSinceLastActivity
          in: query
          required: true
          schema:
            type: integer
            example: 1360031010
      responses:
        "200":
          description: list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/users'

  /users/{userId}/bookingsInfo:
    get:
      tags:
        - developers
      summary: Get detailed information about movies booked by the user
      operationId: getMoviesInfoBookedByUser
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            example: chris_rivers
      responses:
        "200":
          description: List of movies booked by the user with booking dates
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    filmInfo:
                      $ref: '#/components/schemas/movie'
                    BookingDate:
                      type: integer
                      example: 20151201
        "400":
          description: No movies found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
components:
  schemas:
    users:
      required:
        - userItem
      type: array
      items:
        $ref: '#/components/schemas/userItem'
    userItem:
      required:
      - id
      - name
      - last_active
      type: object
      properties:
        id:
          type: string
          example: chris_rivers
        name:
          type: string
          example: Chris Rivers
        last_active:
          type: integer
          example: 1360031010
    movie:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
    error:
      type: object
      properties:
        error:
          type: string
          example: "User not found"